https://zhuanlan.zhihu.com/p/580756714


arm平台下amba总线的uart驱动名称：/dev/ttyAMA

                amba {
                        compatible = "arm,amba-bus";
                        #address-cells = <0x01>;
                        #size-cells = <0x01>;
                        ranges;

                        arm-timer {
                                compatible = "arm,armv8-timer";
                                interrupts = <0x01 0x0d 0xf04 0x01 0x0e 0xf04>;
                                clock-frequency = <0x2faf080>;
                        };

                        timer@12000000 {
                                compatible = "hisilicon,hisp804";
                                reg = <0x12000000 0x20 0x1d840000 0x20 0x1d840020 0x20 0x1d850000 0x20 0x1d850020 0x20>;
                                interrupts = <0x00 0x71 0x04 0x00 0x72 0x04 0x00 0x73 0x04 0x00 0x74 0x04>;
                                clocks = <0x02>;
                                clock-names = "apb_pclk";
                        };

                        uart@12100000 {
                                compatible = "arm,pl011\0arm,primecell";
                                reg = <0x12100000 0x1000>;
                                interrupts = <0x00 0x06 0x04>;
                                clocks = <0x03 0x5b>;
                                clock-names = "apb_pclk";
                                status = "okay";
                        };

                        uart@12101000 {
                                compatible = "arm,pl011\0arm,primecell";
                                reg = <0x12101000 0x1000>;
                                interrupts = <0x00 0x07 0x04>;
                                clocks = <0x03 0x5c>;
                                clock-names = "apb_pclk";
                                dmas = <0x04 0x02 0x02 0x04 0x03 0x03>;
                                dma-names = "tx\0rx";
                                status = "disabled";
                        };
                }


D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\serial\amba-pl011.c
定义amba驱动设备名称：
static struct uart_driver amba_reg = {
	.owner			= THIS_MODULE,
	.driver_name		= "ttyAMA",
	.dev_name		= "ttyAMA",
	.major			= SERIAL_AMBA_MAJOR,
	.minor			= SERIAL_AMBA_MINOR,
	.nr			= UART_NR,
	.cons			= AMBA_CONSOLE,
};

D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\serial\serial_core.c
赋值设备名称，增加1/2/3等序号
指定驱动名字是一个拼接。dev_name是/dev/ttyAMA，后面会拼接一个编号数字。
uart_add_one_port(struct uart_driver *drv, struct uart_port *uport)
	uport->cons = drv->cons;
	uport->minor = drv->tty_driver->minor_start + uport->line;
	uport->name = kasprintf(GFP_KERNEL, "%s%d", drv->dev_name,
				drv->tty_driver->name_base + uport->line);

D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\serial\amba-pl011.c
声明设备
OF_EARLYCON_DECLARE(pl011, "arm,pl011", pl011_early_console_setup);
OF_EARLYCON_DECLARE(pl011, "arm,sbsa-uart", pl011_early_console_setup);


D:\source_code\linux-6.4.8\linux-6.4.8\include\linux\serial_core.h
#define OF_EARLYCON_DECLARE(_name, compat, fn)				\
	static const struct earlycon_id __UNIQUE_ID(__earlycon_##_name) \
		EARLYCON_USED_OR_UNUSED  __section("__earlycon_table")  \
		__aligned(__alig

所以dts里面第一个uart对应的是/dev/ttyAMA0，第二个uart对应的是/dev/ttyAMA1，以此类推。


D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\serial\serial_core.c
定义设备相关的响应函数：
static const struct tty_operations uart_ops = {
	.install	= uart_install,
	.open		= uart_open,
	.close		= uart_close,
	.write		= uart_write,
	.put_char	= uart_put_char,
	.flush_chars	= uart_flush_chars,
	.write_room	= uart_write_room,
	.chars_in_buffer= uart_chars_in_buffer,
	.flush_buffer	= uart_flush_buffer,
	.ioctl		= uart_ioctl,
	.throttle	= uart_throttle,
	.unthrottle	= uart_unthrottle,
	.send_xchar	= uart_send_xchar,
	.set_termios	= uart_set_termios,
	.set_ldisc	= uart_set_ldisc,
	.stop		= uart_stop,
	.start		= uart_start,
	.hangup		= uart_hangup,
	.break_ctl	= uart_break_ctl,
	.wait_until_sent= uart_wait_until_sent,
#ifdef CONFIG_PROC_FS
	.proc_show	= uart_proc_show,
#endif
	.tiocmget	= uart_tiocmget,
	.tiocmset	= uart_tiocmset,
	.set_serial	= uart_set_info_user,
	.get_serial	= uart_get_info_user,
	.get_icount	= uart_get_icount,
#ifdef CONFIG_CONSOLE_POLL
	.poll_init	= uart_poll_init,
	.poll_get_char	= uart_poll_get_char,
	.poll_put_char	= uart_poll_put_char,
#endif
};

static const struct tty_port_operations uart_port_ops = {
	.carrier_raised = uart_carrier_raised,
	.dtr_rts	= uart_dtr_rts,
	.activate	= uart_port_activate,
	.shutdown	= uart_tty_port_shutdown,
};



D:\source_code\linux-6.4.8\linux-6.4.8\include\linux\tty_driver.h
tty_operations的定义，
struct tty_operations {
	struct tty_struct * (*lookup)(struct tty_driver *driver,
			struct file *filp, int idx);
	int  (*install)(struct tty_driver *driver, struct tty_struct *tty);
	void (*remove)(struct tty_driver *driver, struct tty_struct *tty);
	int  (*open)(struct tty_struct * tty, struct file * filp);
	void (*close)(struct tty_struct * tty, struct file * filp);
	void (*shutdown)(struct tty_struct *tty);
	void (*cleanup)(struct tty_struct *tty);
	int  (*write)(struct tty_struct * tty,
		      const unsigned char *buf, int count);
	int  (*put_char)(struct tty_struct *tty, unsigned char ch);
	void (*flush_chars)(struct tty_struct *tty);
	unsigned int (*write_room)(struct tty_struct *tty);
	unsigned int (*chars_in_buffer)(struct tty_struct *tty);
	int  (*ioctl)(struct tty_struct *tty,
		    unsigned int cmd, unsigned long arg);
	long (*compat_ioctl)(struct tty_struct *tty,
			     unsigned int cmd, unsigned long arg);
	void (*set_termios)(struct tty_struct *tty, const struct ktermios *old);
	void (*throttle)(struct tty_struct * tty);
	void (*unthrottle)(struct tty_struct * tty);
	void (*stop)(struct tty_struct *tty);
	void (*start)(struct tty_struct *tty);
	void (*hangup)(struct tty_struct *tty);
	int (*break_ctl)(struct tty_struct *tty, int state);
	void (*flush_buffer)(struct tty_struct *tty);
	void (*set_ldisc)(struct tty_struct *tty);
	void (*wait_until_sent)(struct tty_struct *tty, int timeout);
	void (*send_xchar)(struct tty_struct *tty, char ch);
	int (*tiocmget)(struct tty_struct *tty);
	int (*tiocmset)(struct tty_struct *tty,
			unsigned int set, unsigned int clear);
	int (*resize)(struct tty_struct *tty, struct winsize *ws);
	int (*get_icount)(struct tty_struct *tty,
				struct serial_icounter_struct *icount);
	int  (*get_serial)(struct tty_struct *tty, struct serial_struct *p);
	int  (*set_serial)(struct tty_struct *tty, struct serial_struct *p);
	void (*show_fdinfo)(struct tty_struct *tty, struct seq_file *m);
#ifdef CONFIG_CONSOLE_POLL
	int (*poll_init)(struct tty_driver *driver, int line, char *options);
	int (*poll_get_char)(struct tty_driver *driver, int line);
	void (*poll_put_char)(struct tty_driver *driver, int line, char ch);
#endif
	int (*proc_show)(struct seq_file *m, void *driver);
} __randomize_layout;

tty_driver的定义：
struct tty_driver {
	struct kref kref;
	struct cdev **cdevs;
	struct module	*owner;
	const char	*driver_name;
	const char	*name;
	int	name_base;
	int	major;
	int	minor_start;
	unsigned int	num;
	short	type;
	short	subtype;
	struct ktermios init_termios;
	unsigned long	flags;
	struct proc_dir_entry *proc_entry;
	struct tty_driver *other;

	/*
	 * Pointer to the tty data structures
	 */
	struct tty_struct **ttys;
	struct tty_port **ports;
	struct ktermios **termios;
	void *driver_state;

	/*
	 * Driver methods
	 */

	const struct tty_operations *ops;
	struct list_head tty_drivers;
} __randomize_layout;





=====================================================
kernel启动注册uart驱动
D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\serial\amba-pl011.c
arch_initcall(pl011_init);

static int __init pl011_init(void)
{
        printk(KERN_INFO "Serial: AMBA PL011 UART driver\n");

        if (platform_driver_register(&arm_sbsa_uart_platform_driver))
                pr_warn("could not register SBSA UART platform driver\n");
        return amba_driver_register(&pl011_driver);
}


dmesg里面能看到kernel的打印:
Serial: AMBA PL011 UART driver
12100000.uart: ttyAMA0 at MMIO 0x12100000 (irq = 13, base_baud = 0) is a PL011 rev2
console [ttyAMA0] enabled
12102000.uart: ttyAMA2 at MMIO 0x12102000 (irq = 14, base_baud = 0) is a PL011 rev2
12103000.uart: ttyAMA3 at MMIO 0x12103000 (irq = 15, base_baud = 0) is a PL011 rev2
12104000.uart: ttyAMA4 at MMIO 0x12104000 (irq = 16, base_baud = 0) is a PL011 rev2
18060000.uart: ttyAMA5 at MMIO 0x18060000 (irq = 17, base_baud = 0) is a PL011 rev2
18061000.uart: ttyAMA6 at MMIO 0x18061000 (irq = 18, base_baud = 0) is a PL011 rev2
18062000.uart: ttyAMA7 at MMIO 0x18062000 (irq = 19, base_baud = 0) is a PL011 rev2
18063000.uart: ttyAMA8 at MMIO 0x18063000 (irq = 20, base_baud = 0) is a PL011 rev2
18064000.uart: ttyAMA9 at MMIO 0x18064000 (irq = 21, base_baud = 0) is a PL011 rev2
18065000.uart: ttyAMA10 at MMIO 0x18065000 (irq = 18, base_baud = 0) is a PL011 rev2
18066000.uart: ttyAMA11 at MMIO 0x18066000 (irq = 19, base_baud = 0) is a PL011 rev2



pl011_driver:
static struct amba_driver pl011_driver = {
        .drv = {
                .name   = "uart-pl011",
                .pm     = &pl011_dev_pm_ops,
                .suppress_bind_attrs = IS_BUILTIN(CONFIG_SERIAL_AMBA_PL011),
        },
        .id_table       = pl011_ids,
        .probe          = pl011_probe,
        .remove         = pl011_remove,
};


D:\source_code\linux-6.4.8\linux-6.4.8\drivers\amba\bus.c
int amba_driver_register(struct amba_driver *drv)
{
        if (!drv->probe)
                return -EINVAL;

        drv->drv.bus = &amba_bustype;

        return driver_register(&drv->drv);
}
EXPORT_SYMBOL(amba_driver_register);


D:\source_code\linux-6.4.8\linux-6.4.8\include\linux\amba\bus.h
struct amba_driver {
        struct device_driver    drv;
        int                     (*probe)(struct amba_device *, const struct amba_id *);
        void                    (*remove)(struct amba_device *);
        void                    (*shutdown)(struct amba_device *);
        const struct amba_id    *id_table;
        /*
         * For most device drivers, no need to care about this flag as long as
         * all DMAs are handled through the kernel DMA API. For some special
         * ones, for example VFIO drivers, they know how to manage the DMA
         * themselves and set this flag so that the IOMMU layer will allow them
         * to setup and manage their own I/O address space.
         */
        bool driver_managed_dma;
};


amba设备在make menuconfig中选择是否支持
D:\source_code\linux-6.4.8\linux-6.4.8\drivers\amba\Kconfig
# SPDX-License-Identifier: GPL-2.0
config ARM_AMBA
        bool

if ARM_AMBA

config TEGRA_AHB
        bool
        default y if ARCH_TEGRA
        help
          Adds AHB configuration functionality for NVIDIA Tegra SoCs,
          which controls AHB bus master arbitration and some performance
          parameters (priority, prefetch size).

endif




driver_register
注册amba_driver
D:\source_code\linux-6.4.8\linux-6.4.8\drivers\base\driver.c
/**
 * driver_register - register driver with bus
 * @drv: driver to register
 *
 * We pass off most of the work to the bus_add_driver() call,
 * since most of the things we have to do deal with the bus
 * structures.
 */
int driver_register(struct device_driver *drv)
{
        int ret;
        struct device_driver *other;

        if (!bus_is_registered(drv->bus)) {
                pr_err("Driver '%s' was unable to register with bus_type '%s' because the bus was not initialized.\n",
                           drv->name, drv->bus->name);
                return -EINVAL;
        }

        if ((drv->bus->probe && drv->probe) ||
            (drv->bus->remove && drv->remove) ||
            (drv->bus->shutdown && drv->shutdown))
                pr_warn("Driver '%s' needs updating - please use "
                        "bus_type methods\n", drv->name);

        other = driver_find(drv->name, drv->bus);
        if (other) {
                pr_err("Error: Driver '%s' is already registered, "
                        "aborting...\n", drv->name);
                return -EBUSY;
        }

        ret = bus_add_driver(drv);
        if (ret)
                return ret;
        ret = driver_add_groups(drv, drv->groups);
        if (ret) {
                bus_remove_driver(drv);
                return ret;
        }
        kobject_uevent(&drv->p->kobj, KOBJ_ADD);
        deferred_probe_extend_timeout();

        return ret;
}
EXPORT_SYMBOL_GPL(driver_register);


