串口的物理地址映射


D:\source_code\linux-6.4.8\linux-6.4.8\kernel\resource.c
struct resource iomem_resource = {
        .name   = "PCI mem",
        .start  = 0,
        .end    = -1,
        .flags  = IORESOURCE_MEM,
};
EXPORT_SYMBOL(iomem_resource);

D:\source_code\linux-6.4.8\linux-6.4.8\drivers\of\platform.c
static int of_platform_bus_create(struct device_node *bus,
                                  const struct of_device_id *matches,
                                  const struct of_dev_auxdata *lookup,
                                  struct device *parent, bool strict)
of_amba_device_create解析amba设备
        if (of_device_is_compatible(bus, "arm,primecell")) {
                /*
                 * Don't return an error here to keep compatibility with older
                 * device tree files.
                 */
                of_amba_device_create(bus, bus_id, platform_data, parent);
                return 0;
        }

                static struct amba_device *of_amba_device_create(struct device_node *node,
                                                 const char *bus_id,
                                                 void *platform_data,
                                                 struct device *parent)
{
        struct amba_device *dev;
        int ret;

        pr_debug("Creating amba device %pOF\n", node);

        if (!of_device_is_available(node) ||
            of_node_test_and_set_flag(node, OF_POPULATED))
                return NULL;

        dev = amba_device_alloc(NULL, 0, 0);
        if (!dev)
                goto err_clear_flag;

        /* AMBA devices only support a single DMA mask */
        dev->dev.coherent_dma_mask = DMA_BIT_MASK(32);
        dev->dev.dma_mask = &dev->dev.coherent_dma_mask;

        /* setup generic device info */
        dev->dev.of_node = of_node_get(node);
        dev->dev.fwnode = &node->fwnode;
        dev->dev.parent = parent ? : &platform_bus;
        dev->dev.platform_data = platform_data;
        if (bus_id)
                dev_set_name(&dev->dev, "%s", bus_id);
        else
                of_device_make_bus_id(&dev->dev);

        /* Allow the HW Peripheral ID to be overridden */
        of_property_read_u32(node, "arm,primecell-periphid", &dev->periphid);

        ret = of_address_to_resource(node, 0, &dev->res);
        if (ret) {
                pr_err("amba: of_address_to_resource() failed (%d) for %pOF\n",
                       ret, node);
                goto err_free;
        }

        ret = amba_device_add(dev, &iomem_resource);
        if (ret) {
                pr_err("amba_device_add() failed (%d) for %pOF\n",
                       ret, node);
                goto err_free;
        }

        return dev;

err_free:
        amba_device_put(dev);
err_clear_flag:
        of_node_clear_flag(node, OF_POPULATED);
        return NULL;
}


D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\serial\amba-pl011.c
static int pl011_probe(struct amba_device *dev, const struct amba_id *id)
==》
static int pl011_setup_port(struct device *dev, struct uart_amba_port *uap,
                            struct resource *mmiobase, int index)
{
        void __iomem *base;
        int ret;

        base = devm_ioremap_resource(dev, mmiobase);
        if (IS_ERR(base))
                return PTR_ERR(base);

        index = pl011_probe_dt_alias(index, dev);

        uap->port.dev = dev;
        uap->port.mapbase = mmiobase->start;
        uap->port.membase = base;
        uap->port.fifosize = uap->fifosize;
        uap->port.has_sysrq = IS_ENABLED(CONFIG_SERIAL_AMBA_PL011_CONSOLE);
        uap->port.flags = UPF_BOOT_AUTOCONF;
        uap->port.line = index;

        ret = pl011_get_rs485_mode(uap);
        if (ret)
                return ret;

        amba_ports[index] = uap;

        return 0;
}

uap->port.mapbase和uap->port.membase是物理地址映射的信息，base是映射后的虚拟地址，mmiobase->start是映射前的物理地址

D:\source_code\linux-6.4.8\linux-6.4.8\include\linux\amba\bus.h
struct amba_device {
        struct device           dev;
        struct resource         res;
        struct clk              *pclk;
        struct device_dma_parameters dma_parms;
        unsigned int            periphid;
        struct mutex            periphid_lock;
        unsigned int            cid;
        struct amba_cs_uci_id   uci;
        unsigned int            irq[AMBA_NR_IRQS];
        /*
         * Driver name to force a match.  Do not set directly, because core
         * frees it.  Use driver_set_override() to set or clear it.
         */
        const char              *driver_override;
};
resource的res中保存寄存器等信息

D:\source_code\linux-6.4.8\linux-6.4.8\include\linux\ioport.h
struct resource {
        resource_size_t start;
        resource_size_t end;
        const char *name;
        unsigned long flags;
        unsigned long desc;
        struct resource *parent, *sibling, *child;
};

flags的定义：
#define IORESOURCE_BITS         0x000000ff      /* Bus-specific bits */

#define IORESOURCE_TYPE_BITS    0x00001f00      /* Resource type */
#define IORESOURCE_IO           0x00000100      /* PCI/ISA I/O ports */
#define IORESOURCE_MEM          0x00000200
#define IORESOURCE_REG          0x00000300      /* Register offsets */
#define IORESOURCE_IRQ          0x00000400
#define IORESOURCE_DMA          0x00000800
#define IORESOURCE_BUS          0x00001000

#define IORESOURCE_PREFETCH     0x00002000      /* No side effects */
#define IORESOURCE_READONLY     0x00004000
#define IORESOURCE_CACHEABLE    0x00008000
#define IORESOURCE_RANGELENGTH  0x00010000
#define IORESOURCE_SHADOWABLE   0x00020000

#define IORESOURCE_SIZEALIGN    0x00040000      /* size indicates alignment */
#define IORESOURCE_STARTALIGN   0x00080000      /* start field is alignment */

#define IORESOURCE_MEM_64       0x00100000
#define IORESOURCE_WINDOW       0x00200000      /* forwarded by bridge */
#define IORESOURCE_MUXED        0x00400000      /* Resource is software muxed */

#define IORESOURCE_EXT_TYPE_BITS 0x01000000     /* Resource extended types */
#define IORESOURCE_SYSRAM       0x01000000      /* System RAM (modifier) */

/* IORESOURCE_SYSRAM specific bits. */
#define IORESOURCE_SYSRAM_DRIVER_MANAGED        0x02000000 /* Always detected via a driver. */
#define IORESOURCE_SYSRAM_MERGEABLE             0x04000000 /* Resource can be merged. */

#define IORESOURCE_EXCLUSIVE    0x08000000      /* Userland may not map this resource */

#define IORESOURCE_DISABLED     0x10000000
#define IORESOURCE_UNSET        0x20000000      /* No address assigned yet */
#define IORESOURCE_AUTO         0x40000000
#define IORESOURCE_BUSY         0x80000000      /* Driver has marked this resource busy */

/* I/O resource extended types */
#define IORESOURCE_SYSTEM_RAM           (IORESOURCE_MEM|IORESOURCE_SYSRAM)

/* PnP IRQ specific bits (IORESOURCE_BITS) */
#define IORESOURCE_IRQ_HIGHEDGE         (1<<0)
#define IORESOURCE_IRQ_LOWEDGE          (1<<1)
#define IORESOURCE_IRQ_HIGHLEVEL        (1<<2)
#define IORESOURCE_IRQ_LOWLEVEL         (1<<3)
#define IORESOURCE_IRQ_SHAREABLE        (1<<4)
#define IORESOURCE_IRQ_OPTIONAL         (1<<5)
#define IORESOURCE_IRQ_WAKECAPABLE      (1<<6)

/* PnP DMA specific bits (IORESOURCE_BITS) */
#define IORESOURCE_DMA_TYPE_MASK        (3<<0)
#define IORESOURCE_DMA_8BIT             (0<<0)
#define IORESOURCE_DMA_8AND16BIT        (1<<0)
#define IORESOURCE_DMA_16BIT            (2<<0)

#define IORESOURCE_DMA_MASTER           (1<<2)
#define IORESOURCE_DMA_BYTE             (1<<3)
#define IORESOURCE_DMA_WORD             (1<<4)

#define IORESOURCE_DMA_SPEED_MASK       (3<<6)
#define IORESOURCE_DMA_COMPATIBLE       (0<<6)
#define IORESOURCE_DMA_TYPEA            (1<<6)
#define IORESOURCE_DMA_TYPEB            (2<<6)
#define IORESOURCE_DMA_TYPEF            (3<<6)

/* PnP memory I/O specific bits (IORESOURCE_BITS) */
#define IORESOURCE_MEM_WRITEABLE        (1<<0)  /* dup: IORESOURCE_READONLY */
#define IORESOURCE_MEM_CACHEABLE        (1<<1)  /* dup: IORESOURCE_CACHEABLE */
#define IORESOURCE_MEM_RANGELENGTH      (1<<2)  /* dup: IORESOURCE_RANGELENGTH */
#define IORESOURCE_MEM_TYPE_MASK        (3<<3)
#define IORESOURCE_MEM_8BIT             (0<<3)
#define IORESOURCE_MEM_16BIT            (1<<3)
#define IORESOURCE_MEM_8AND16BIT        (2<<3)
#define IORESOURCE_MEM_32BIT            (3<<3)
#define IORESOURCE_MEM_SHADOWABLE       (1<<5)  /* dup: IORESOURCE_SHADOWABLE */
#define IORESOURCE_MEM_EXPANSIONROM     (1<<6)
#define IORESOURCE_MEM_NONPOSTED        (1<<7)

/* PnP I/O specific bits (IORESOURCE_BITS) */
#define IORESOURCE_IO_16BIT_ADDR        (1<<0)
#define IORESOURCE_IO_FIXED             (1<<1)
#define IORESOURCE_IO_SPARSE            (1<<2)

/* PCI ROM control bits (IORESOURCE_BITS) */
#define IORESOURCE_ROM_ENABLE           (1<<0)  /* ROM is enabled, same as PCI_ROM_ADDRESS_ENABLE */
#define IORESOURCE_ROM_SHADOW           (1<<1)  /* Use RAM image, not ROM BAR */

/* PCI control bits.  Shares IORESOURCE_BITS with above PCI ROM.  */
#define IORESOURCE_PCI_FIXED            (1<<4)  /* Do not move resource */
#define IORESOURCE_PCI_EA_BEI           (1<<5)  /* BAR Equivalent Indicator */
