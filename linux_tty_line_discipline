ldiscs:
TTY line discipline process all incoming and outgoing character from/to a tty device. The default line discipline is N_TTY.
It is also a fallback if establishing any other discipline for a tty fails. If even N_TTY fails, N_NULL takes over.
That never fails, but also does not process any characters – it throws them away.

Every character received by the kernel (both from devices and users) is passed through a preselected TTY Line Discipline (in short ldisc; in C, struct tty_ldisc_ops).
Its task is to transform characters as defined by a particular ldisc or by user too. The default one is n_tty, implementing echoes, signal handling, jobs control,
special characters processing, and more. The transformed characters are passed further to user/device, depending on the source.



D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\n_tty.c
D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\n_null.c
默认会用n_tty，如果n_tty注册失败了，用n_null，
static struct tty_ldisc_ops null_ldisc = {
        .owner          =       THIS_MODULE,
        .num            =       N_NULL,
        .name           =       "n_null",
        .open           =       n_null_open,
        .close          =       n_null_close,
        .read           =       n_null_read,
        .write          =       n_null_write,
        .receive_buf    =       n_null_receivebuf
};

static int __init n_null_init(void)
{
        BUG_ON(tty_register_ldisc(&null_ldisc));
        return 0;
}

static void __exit n_null_exit(void)
{
        tty_unregister_ldisc(&null_ldisc);
}

module_init(n_null_init);
module_exit(n_null_exit);



N_NULL的定义：
D:\source_code\linux-6.4.8\linux-6.4.8\include\uapi\linux\tty.h
/* line disciplines */
#define N_TTY           0
#define N_SLIP          1
#define N_MOUSE         2
#define N_PPP           3
#define N_STRIP         4
#define N_AX25          5
#define N_X25           6       /* X.25 async */
#define N_6PACK         7
#define N_MASC          8       /* Reserved for Mobitex module <kaz@cafe.net> */
#define N_R3964         9       /* Reserved for Simatic R3964 module */
#define N_PROFIBUS_FDL  10      /* Reserved for Profibus */
#define N_IRDA          11      /* Linux IrDa - http://irda.sourceforge.net/ */
#define N_SMSBLOCK      12      /* SMS block mode - for talking to GSM data */
                                /* cards about SMS messages */
#define N_HDLC          13      /* synchronous HDLC */
#define N_SYNC_PPP      14      /* synchronous PPP */
#define N_HCI           15      /* Bluetooth HCI UART */
#define N_GIGASET_M101  16      /* Siemens Gigaset M101 serial DECT adapter */
#define N_SLCAN         17      /* Serial / USB serial CAN Adaptors */
#define N_PPS           18      /* Pulse per Second */
#define N_V253          19      /* Codec control over voice modem */
#define N_CAIF          20      /* CAIF protocol for talking to modems */
#define N_GSM0710       21      /* GSM 0710 Mux */
#define N_TI_WL         22      /* for TI's WL BT, FM, GPS combo chips */
#define N_TRACESINK     23      /* Trace data routing for MIPI P1149.7 */
#define N_TRACEROUTER   24      /* Trace data routing for MIPI P1149.7 */
#define N_NCI           25      /* NFC NCI UART */
#define N_SPEAKUP       26      /* Speakup communication with synths */
#define N_NULL          27      /* Null ldisc used for error handling */
#define N_MCTP          28      /* MCTP-over-serial */
#define N_DEVELOPMENT   29      /* Manual out-of-tree testing */
#define N_CAN327        30      /* ELM327 based OBD-II interfaces */

/* Always the newest line discipline + 1 */
#define NR_LDISCS       31



N_TTY的定义：
D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\n_tty.c
static struct tty_ldisc_ops n_tty_ops = {
        .owner           = THIS_MODULE,
        .num             = N_TTY,
        .name            = "n_tty",
        .open            = n_tty_open,
        .close           = n_tty_close,
        .flush_buffer    = n_tty_flush_buffer,
        .read            = n_tty_read,
        .write           = n_tty_write,
        .ioctl           = n_tty_ioctl,
        .set_termios     = n_tty_set_termios,
        .poll            = n_tty_poll,
        .receive_buf     = n_tty_receive_buf,
        .write_wakeup    = n_tty_write_wakeup,
        .receive_buf2    = n_tty_receive_buf2,
        .lookahead_buf   = n_tty_lookahead_flow_ctrl,
};

/**
 *      n_tty_inherit_ops       -       inherit N_TTY methods
 *      @ops: struct tty_ldisc_ops where to save N_TTY methods
 *
 *      Enables a 'subclass' line discipline to 'inherit' N_TTY methods.
 */

void n_tty_inherit_ops(struct tty_ldisc_ops *ops)
{
        *ops = n_tty_ops;
        ops->owner = NULL;
}
EXPORT_SYMBOL_GPL(n_tty_inherit_ops);

void __init n_tty_init(void)
{
        tty_register_ldisc(&n_tty_ops);
}


D:\source_code\linux-6.4.8\linux-6.4.8\kernel\printk\printk.c
调用n_tty_init
void __init console_init(void)
{
        int ret;
        initcall_t call;
        initcall_entry_t *ce;

        /* Setup the default TTY line discipline. */
        n_tty_init();

        /*
         * set up the console device so that later boot sequences can
         * inform about problems etc..
         */
        ce = __con_initcall_start;
        trace_initcall_level("console");
        while (ce < __con_initcall_end) {
                call = initcall_from_entry(ce);
                trace_initcall_start(call);
                ret = call();
                trace_initcall_finish(call, ret);
                ce++;
        }
}



D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\tty_ldisc.c
定义tty_ldisc_ops对象，实现tty_register_ldisc等
struct tty_ldisc_ops {
        char    *name;
        int     num;

        /*
         * The following routines are called from above.
         */
        int     (*open)(struct tty_struct *tty);
        void    (*close)(struct tty_struct *tty);
        void    (*flush_buffer)(struct tty_struct *tty);
        ssize_t (*read)(struct tty_struct *tty, struct file *file,
                        unsigned char *buf, size_t nr,
                        void **cookie, unsigned long offset);
        ssize_t (*write)(struct tty_struct *tty, struct file *file,
                         const unsigned char *buf, size_t nr);
        int     (*ioctl)(struct tty_struct *tty, unsigned int cmd,
                        unsigned long arg);
        int     (*compat_ioctl)(struct tty_struct *tty, unsigned int cmd,
                        unsigned long arg);
        void    (*set_termios)(struct tty_struct *tty, const struct ktermios *old);
        __poll_t (*poll)(struct tty_struct *tty, struct file *file,
                             struct poll_table_struct *wait);
        void    (*hangup)(struct tty_struct *tty);

        /*
         * The following routines are called from below.
         */
        void    (*receive_buf)(struct tty_struct *tty, const unsigned char *cp,
                               const char *fp, int count);
        void    (*write_wakeup)(struct tty_struct *tty);
        void    (*dcd_change)(struct tty_struct *tty, bool active);
        int     (*receive_buf2)(struct tty_struct *tty, const unsigned char *cp,
                                const char *fp, int count);
        void    (*lookahead_buf)(struct tty_struct *tty, const unsigned char *cp,
                                 const unsigned char *fp, unsigned int count);

        struct  module *owner;
};

struct tty_ldisc {
        struct tty_ldisc_ops *ops;
        struct tty_struct *tty;
};

#define MODULE_ALIAS_LDISC(ldisc) \
        MODULE_ALIAS("tty-ldisc-" __stringify(ldisc))

extern const struct seq_operations tty_ldiscs_seq_ops;

struct tty_ldisc *tty_ldisc_ref(struct tty_struct *);
void tty_ldisc_deref(struct tty_ldisc *);
struct tty_ldisc *tty_ldisc_ref_wait(struct tty_struct *);

void tty_ldisc_flush(struct tty_struct *tty);

int tty_register_ldisc(struct tty_ldisc_ops *new_ldisc);
void tty_unregister_ldisc(struct tty_ldisc_ops *ldisc);
int tty_set_ldisc(struct tty_struct *tty, int disc);




D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\n_tty.c
保存数据的read_buf，echo_buf是做回显的时候保存数据的buf
struct n_tty_data {
    ...
        /* shared by producer and consumer */
        char read_buf[N_TTY_BUF_SIZE];
        DECLARE_BITMAP(read_flags, N_TTY_BUF_SIZE);
        unsigned char echo_buf[N_TTY_BUF_SIZE];
        ...
}

D:\source_code\linux-6.4.8\linux-6.4.8\include\linux\types.h
#define DECLARE_BITMAP(name,bits) \
        unsigned long name[BITS_TO_LONGS(bits)]

D:\source_code\linux-6.4.8\linux-6.4.8\include\linux\tty.h
#define N_TTY_BUF_SIZE 4096



往串口设备写数据的过程
1、应用层write
2、系统调用到内核
D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\tty_io.c
static const struct file_operations tty_fops = {
        .llseek         = no_llseek,
        .read_iter      = tty_read,
        .write_iter     = tty_write,
        .splice_read    = generic_file_splice_read,
        .splice_write   = iter_file_splice_write,
        .poll           = tty_poll,
        .unlocked_ioctl = tty_ioctl,
        .compat_ioctl   = tty_compat_ioctl,
        .open           = tty_open,
        .release        = tty_release,
        .fasync         = tty_fasync,
        .show_fdinfo    = tty_show_fdinfo,
};

static ssize_t tty_write(struct kiocb *iocb, struct iov_iter *from)
static ssize_t file_tty_write(struct file *file, struct kiocb *iocb, struct iov_iter *from)
3、调用到tty_ldisc的write函数即n_tty_write
D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\n_tty.c
static struct tty_ldisc_ops n_tty_ops = {
        .owner           = THIS_MODULE,
        .num             = N_TTY,
        .name            = "n_tty",
        .open            = n_tty_open,
        .close           = n_tty_close,
        .flush_buffer    = n_tty_flush_buffer,
        .read            = n_tty_read,
        .write           = n_tty_write,
        .ioctl           = n_tty_ioctl,
        .set_termios     = n_tty_set_termios,
        .poll            = n_tty_poll,
        .receive_buf     = n_tty_receive_buf,
        .write_wakeup    = n_tty_write_wakeup,
        .receive_buf2    = n_tty_receive_buf2,
        .lookahead_buf   = n_tty_lookahead_flow_ctrl,
};
static ssize_t n_tty_write(struct tty_struct *tty, struct file *file,
                           const unsigned char *buf, size_t nr)

5、调用到tty_struct tty->ops->write，即uart_write
D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\serial\serial_core.c
static const struct tty_operations uart_ops = {
        .install        = uart_install,
        .open           = uart_open,
        .close          = uart_close,
        .write          = uart_write,
        .put_char       = uart_put_char,
        .flush_chars    = uart_flush_chars,
        .write_room     = uart_write_room,
        .chars_in_buffer= uart_chars_in_buffer,
        .flush_buffer   = uart_flush_buffer,
        .ioctl          = uart_ioctl,
        .throttle       = uart_throttle,
        .unthrottle     = uart_unthrottle,
        .send_xchar     = uart_send_xchar,
        .set_termios    = uart_set_termios,
        .set_ldisc      = uart_set_ldisc,
        .stop           = uart_stop,
        .start          = uart_start,
        .hangup         = uart_hangup,
        .break_ctl      = uart_break_ctl,
        .wait_until_sent= uart_wait_until_sent,
#ifdef CONFIG_PROC_FS
        .proc_show      = uart_proc_show,
#endif
        .tiocmget       = uart_tiocmget,
        .tiocmset       = uart_tiocmset,
        .set_serial     = uart_set_info_user,
        .get_serial     = uart_get_info_user,
        .get_icount     = uart_get_icount,
#ifdef CONFIG_CONSOLE_POLL
        .poll_init      = uart_poll_init,
        .poll_get_char  = uart_poll_get_char,
        .poll_put_char  = uart_poll_put_char,
#endif
};

6、修改tty_struct tty->driver_data->xmit中的数据，之后调用__uart_start(tty)
7、__uart_start
static void __uart_start(struct tty_struct *tty)
{
        struct uart_state *state = tty->driver_data;
        struct uart_port *port = state->uart_port;

        if (port && !(port->flags & UPF_DEAD) && !uart_tx_stopped(port))
                port->ops->start_tx(port);
}
8、port->ops
D:\source_code\linux-6.4.8\linux-6.4.8\include\linux\serial_core.h
struct uart_ops {
        unsigned int    (*tx_empty)(struct uart_port *);
        void            (*set_mctrl)(struct uart_port *, unsigned int mctrl);
        unsigned int    (*get_mctrl)(struct uart_port *);
        void            (*stop_tx)(struct uart_port *);
        void            (*start_tx)(struct uart_port *);
        void            (*throttle)(struct uart_port *);
        void            (*unthrottle)(struct uart_port *);
        void            (*send_xchar)(struct uart_port *, char ch);
        void            (*stop_rx)(struct uart_port *);
        void            (*start_rx)(struct uart_port *);
        void            (*enable_ms)(struct uart_port *);
        void            (*break_ctl)(struct uart_port *, int ctl);
        int             (*startup)(struct uart_port *);
        void            (*shutdown)(struct uart_port *);
        void            (*flush_buffer)(struct uart_port *);
        void            (*set_termios)(struct uart_port *, struct ktermios *new,
                                       const struct ktermios *old);
        void            (*set_ldisc)(struct uart_port *, struct ktermios *);
        void            (*pm)(struct uart_port *, unsigned int state,
                              unsigned int oldstate);
        const char      *(*type)(struct uart_port *);
        void            (*release_port)(struct uart_port *);
        int             (*request_port)(struct uart_port *);
        void            (*config_port)(struct uart_port *, int);
        int             (*verify_port)(struct uart_port *, struct serial_struct *);
        int             (*ioctl)(struct uart_port *, unsigned int, unsigned long);
#ifdef CONFIG_CONSOLE_POLL
        int             (*poll_init)(struct uart_port *);
        void            (*poll_put_char)(struct uart_port *, unsigned char);
        int             (*poll_get_char)(struct uart_port *);
#endif
};

9、对应到amba_pl011.c中的uart实现start_tx即pl011_start_tx
D:\source_code\linux-6.4.8\linux-6.4.8\drivers\tty\serial\amba-pl011.c
static const struct uart_ops amba_pl011_pops = {
        .tx_empty       = pl011_tx_empty,
        .set_mctrl      = pl011_set_mctrl,
        .get_mctrl      = pl011_get_mctrl,
        .stop_tx        = pl011_stop_tx,
        .start_tx       = pl011_start_tx,
        .stop_rx        = pl011_stop_rx,
        .throttle       = pl011_throttle_rx,
        .unthrottle     = pl011_unthrottle_rx,
        .enable_ms      = pl011_enable_ms,
        .break_ctl      = pl011_break_ctl,
        .startup        = pl011_startup,
        .shutdown       = pl011_shutdown,
        .flush_buffer   = pl011_dma_flush_buffer,
        .set_termios    = pl011_set_termios,
        .type           = pl011_type,
        .config_port    = pl011_config_port,
        .verify_port    = pl011_verify_port,
#ifdef CONFIG_CONSOLE_POLL
        .poll_init     = pl011_hwinit,
        .poll_get_char = pl011_get_poll_char,
        .poll_put_char = pl011_put_poll_char,
#endif
};
/* Start TX with programmed I/O only (no DMA) */
static void pl011_start_tx_pio(struct uart_amba_port *uap)
{
        if (pl011_tx_chars(uap, false)) {
                uap->im |= UART011_TXIM;
                pl011_write(uap->im, uap, REG_IMSC);
        }
}

static void pl011_start_tx(struct uart_port *port)
{
        struct uart_amba_port *uap =
            container_of(port, struct uart_amba_port, port);

        if (!pl011_dma_tx_start(uap))
                pl011_start_tx_pio(uap);
}

发送单个字符：
static bool pl011_tx_char(struct uart_amba_port *uap, unsigned char c,
                          bool from_irq)
{
        if (unlikely(!from_irq) &&
            pl011_read(uap, REG_FR) & UART01x_FR_TXFF)
                return false; /* unable to transmit character */

        pl011_write(c, uap, REG_DR);
        uap->port.icount.tx++;

        return true;
}
