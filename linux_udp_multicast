多播数据报套接字类用于发送和接收 IP 多播包。MulticastSocket 是一种 (UDP) DatagramSocket，它具有加入 Internet 上其他多播主机的“组”的附加功能。
多播组通过 D 类 IP 地址和标准 UDP 端口号指定。可以通过首先使用所需端口创建 MulticastSocket，然后调用 joinGroup(InetAddress groupAddr) 方法来加入多播组。
http://www.steves-internet-guide.com/introduction-multicasting/

ifconfig查询是否支持多播，有MULTICAST就是支持多播，RUNNING是网卡处在运行状态。
ens33: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.203.128  netmask 255.255.255.0  broadcast 192.168.203.255

route查询配置的路由状态：
chengshangxian@ubuntu:~/test/multicast$ route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         _gateway        0.0.0.0         UG    100    0        0 ens33
link-local      0.0.0.0         255.255.0.0     U     1000   0        0 ens33
192.168.203.0   0.0.0.0         255.255.255.0   U     100    0        0 ens33


route add增加路由，dev后面是网卡的名字，这里是usb0，
route add -net 226.0.0.0 netmask 254.0.0.0 dev usb0
route add -net 224.0.0.0 netmask 240.0.0.0 dev usb0


tcpdump抓包，https://www.cnblogs.com/meiming/p/7587385.html
抓包eth0网卡的udp类型数据包：
tcpdump -i eth0 udp
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on usb0, link-type EN10MB (Ethernet), snapshot length 262144 bytes
00:37:55.186990 IP 192.1.2.33.7043 > 226.0.0.22.7043: UDP, length 11
00:37:56.186597 IP 192.1.2.33.7043 > 226.0.0.22.7043: UDP, length 11

抓包要保存到文件中，后面可以用wireshark解析，
tcpdump -i eth0 udp -w test.pcapng

抓udp和igmp类型报文
tcpdump -i eth0 udp or igmp -w test.pcapng

查询是否过滤了保温，为0不过滤地址不一致报文，
sysctl -w net.ipv4.conf.all.rp_filter=0
cat /proc/sys/net/ipv4/conf/all/rp_filter
cat /proc/sys/net/ipv4/conf/usb0/rp_filter

测试用具：
在windows上用PacketSender发送报文，在linux服务器中启动接收程序等待接收数据。
发送报文不需要知道接收方的地址，只需要往组播地址和端口发送数据即可。
接收报文需要加入组播组，并且绑定对应的端口。
可以用packet sender发送报文，File-->settings --> Additional里面可以设置发送报文的网卡地址
https://packetsender.com/


1、ping命令指定网卡
~ # ping -I eth0 145.192.1.22
PING 145.192.1.22 (145.192.1.22): 56 data bytes
64 bytes from 145.192.1.22: seq=0 ttl=128 time=0.969 ms
64 bytes from 145.192.1.22: seq=1 ttl=128 time=0.861 ms
多网卡如果不指定网卡ping，报文不一定是从想要的网口出来。
子网掩码是一样的，系统不知道从哪个口发报文出去

这样报文145.192.1.xx会优先从eth0出去。
~ # ifconfig eth0 145.192.1.67 netmask 255.255.255.0 up
~ # route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
145.192.0.0     *               255.255.0.0     U     0      0        0 usb0
145.192.0.0     *               255.255.0.0     U     0      0        0 eth1
145.192.1.0     *               255.255.255.0   U     0      0        0 eth0

windows也能ping通了
C:\Users\PC>ping 145.192.1.67 -S 145.192.1.22

正在 Ping 145.192.1.67 从 145.192.1.22 具有 32 字节的数据:
来自 145.192.1.67 的回复: 字节=32 时间=1ms TTL=64
来自 145.192.1.67 的回复: 字节=32 时间=1ms TTL=64


不ping通也能收到组播报文
~ # route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
145.192.0.0     *               255.255.0.0     U     0      0        0 usb0
145.192.0.0     *               255.255.0.0     U     0      0        0 eth0
145.192.0.0     *               255.255.0.0     U     0      0        0 eth1

~ # /home/gdu-tech/receive 226.0.0.22 7048 145.192.1.67
groupIp:226.0.0.22, groupPort:7048, localIp:145.192.1.67
read len:11
get datagram message ok! ni:0, 68
i:1, 65
i:2, 6c
i:3, 6c
i:4, 6f
i:5, 74
i:6, 74
i:7, 74
i:8, 74
i:9, 74
i:10, d


加上br0桥接后：
ifconfig eth0 up
ifconfig eth1 up
sleep 1
brctl addbr br0
brctl addif br0 eth0
brctl addif br0 eth1
brctl addif br0 usb0
sleep 1
ifconfig br0 145.192.1.64 netmask 255.255.255.0 up
sleep 1
ifconfig usb0 145.192.1.66
sleep 1
ifconfig eth0 145.192.1.67
sleep 1
ifconfig eth1 145.192.1.65


~ # brctl show
bridge name     bridge id               STP enabled     interfaces
br0             8000.be1c4c62135f       no              eth0
                                                      
arp: Address Resolution Protocol(地址解析协议)
1. 首先检查自己的ARP缓存表，是否存在目的IP对应的目的MAC，如存在则不会触发ARP请求与应答过程，直接根据ARP缓存表项封装目的MAC；
2. 不存在arp缓存表，触发arp请求，对方收到arp请求，根据arp报文中的目的IP判断，是否寻找的主机是自己，如果是则发送arp响应携带自己的MAC地址， 回复对方。
示例：
1，主机A发送一个数据包给主机C之前，首先要获取主机C的MAC地址。
2，主机A先查询自己的ARP缓存表，看是否存在C的MAC，如果存在则直接封装C的MAC，如果不存在则发送ARP request；
3，主机A发送时二层封装S.MAC为自己的MAC地址AA，目的MAC为FF.FF.FF.FF.FF.FF，ARP消息中封装 S.MAC AA S.IP 0.1D.MAC 00/FFD.IP 0.3
4，主机C收到后进行解封装发现D.MAC为FF.FF.FF.FF.FF.FF接收后，交于ARP协议处理，ARP协议 再拆包发现D.IP与自己的IP相同则进行接收（将对方IP、MAC记录下放入arp缓存表） 并进行响应arp reply（告诉对方自己的IP、MAC）；
5，主机A收到主机C回复的ARP reply之后根据该消息中携带的IP、MAC，生成相应的ARP缓存表后续主机A、主机C之间的互访则直接根据ARP缓存表进行封装，不需要再发送ARP request

arp查询地址路由信息：
~ # arp
? (145.192.1.22) at bc:0f:f3:79:35:d4 [ether]  on br0
? (145.192.1.222) at <incomplete>  on br0
? (145.192.1.15) at <incomplete>  on br0

145.192.1.22是windows笔记本电脑的IP地址
bc:0f:f3:79:35:d4是windows笔记本电脑的MAC地址。
ARP协议就需要采用以太网的"广播"功能：将请求包以广播的形式发送，交换机或WiFi设备（无线路由器）收到广播包时，会将此数据发给同一局域网的其他所有主机。
那么，什么是广播？对于初学者而言，我们只需要知道，大部分的广播包，它们有一个共同特征：二层封装时目的MAC是全f（ff.ff.ff.ff.ff.ff）或三层封装时目的IP是全1（255.255.255.255）。可以这样更方便的记住：目的地址最大的，就是广播。

用wireshark抓到的一个arp包的数据：
Frame 13: 60 bytes on wire (480 bits), 60 bytes captured (480 bits) on interface \Device\NPF_{6D0C34A0-A4B9-484C-A1BC-84AD8D26B577}, id 0
Ethernet II, Src: ba:ea:a4:0d:61:17 (ba:ea:a4:0d:61:17), Dst: Broadcast (ff:ff:ff:ff:ff:ff)
Address Resolution Protocol (request)
    Hardware type: Ethernet (1)
    Protocol type: IPv4 (0x0800)
    Hardware size: 6
    Protocol size: 4
    Opcode: request (1)
    Sender MAC address: ba:ea:a4:0d:61:17 (ba:ea:a4:0d:61:17)
    Sender IP address: 145.192.1.64
    Target MAC address: 00:00:00_00:00:00 (00:00:00:00:00:00)
    Target IP address: 145.192.1.15

Opcode: request(1)表示是请求报文。如果是reply(2)，就是回复的报文了。

~ # route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
145.192.0.0     *               255.255.0.0     U     0      0        0 usb0
145.192.0.0     *               255.255.0.0     U     0      0        0 eth0
145.192.0.0     *               255.255.0.0     U     0      0        0 eth1
145.192.1.0     *               255.255.255.0   U     0      0        0 br0

为什么br0的子网掩码要设置为255.255.255.0?

br0: 145.192.1.64
eth0:145.192.1.67
eth1:145.192.1.65
usb0:145.192.1.66


给组播地址226.0.0.22的7047端口发送数据，数据从交接的br口出来，145.192.1.64
./send 226.0.0.22 7047 145.192.1.64&

需要先关掉windows电脑的防火墙，不然收不到数据报文
windows电脑用PacketSender程序接收组播报文
File --> Settings
1、使能UDP服务模式，端口号设置为7047
Enable UDP Servers
2、绑定UDP地址
Additional UDP/TCP/SSL Settings
Bind This，设置为和单板连接的网卡的IP地址：145.192.1.22
3、加入组播组
Multicast
IP Multicast Address设置为组播地址226.0.0.26

如果usb0也连上了，组播也会从usb0口出来
/home/gdu-tech/test_tool # ./tcpdump -i usb0 udp
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on usb0, link-type EN10MB (Ethernet), snapshot length 262144 bytes
01:08:17.713995 IP 145.192.1.64.34945 > 226.0.0.22.7047: UDP, length 30

eth0口的抓包：
/home/gdu-tech/test_tool # ./tcpdump -i eth0 udp
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), snapshot length 
01:10:02.735010 IP 145.192.1.64.34945 > 226.0.0.22.7047: UDP, length 30
01:10:07.736005 IP 145.192.1.64.34945 > 226.0.0.22.7047: UDP, length 30


组播(多播)地址，ip前四位为 1110 ，224.0.0.0～239.255.255.255
( 1110 0000 00000000 00000000 00000000 ~ 1110 1111 11111111 11111111 11111111)
组播地址前4位固定位 1110 ，可变化的有28位，故组播地址有2^28个。
硬件(MAC)组播：即把多播ip地址转为硬件组播MAC地址交付给局域网内的组播组成员。以太网硬件组播地址范围是01:00:5E:00:00:00 ~ 01:00:5E:7F:FF:FF(十六进制)
前25位为0000 0001 : 0000 0000 : 0101 1110 : 0
后23位可供分配地址0000000 : 00000000 : 00000000到1111111 : 11111111 : 11111111。硬件组播MAC地址后23位直接映射ip组播地址的后23位，
故组播ip地址和硬件MAC地址不是一一映射(D类ip地址可变位有28位)。因此主机收到数据链路层的组播数据报，需要由ip层进行过滤可能不属于本主机的数据报。
例如主机在收听组播频道224.0.64.32，但在数据链路层由于ip地址224.128.64.32对应的组播MAC地址相同，因此也可能会收到224.128.64.32的数据报，需要在网络层根据ip过滤。
如226.0.0.22的组播地址，再数据链路层的以太报文，dmac是Destination: IPv4mcast_16 (01:00:5e:00:00:16)
01:00:5e是固定的，后面3个对应的是0.0.22




INADDR_ANY是一个常量，它指代的是一个特殊的IP地址，即0.0.0.0。在网络编程中，当一个进程需要绑定一个网络端口时，可以使用INADDR_ANY来指定该端口可以接受来自任何IP地址的连接请求。
具体来说，当一个进程需要监听某个网络端口时，需要调用bind()函数将该端口与一个IP地址绑定。如果使用INADDR_ANY作为IP地址参数，就表示该端口可以接受来自任何IP地址的连接请求。这样，无论是本地主机还是远程主机，只要它们能够访问该端口，就可以与该进程建立连接。
receive bind地址时，要指定为INADDR_ANY，不能写本地网卡的地址192.168.203.128.

ARP 协议
ARP 协议是 地址解析协议，即 Address Resolution Protocol，它能够根据 IP 地址获取物理地址。主机发送信息时会将包含目标 IP 的 ARP 请求广播到局域网络上的所有主机，并接受返回消息，以此来确定物理地址。
收到消息后的物理地址和 IP 地址会在 ARP 中缓存一段时间，下次查询的时候直接从 ARP 中查询即可。

TCP 协议
TCP 就是 传输控制协议，也就是 Transmission Control Protocol，它是一种面向连接的、可靠的、基于字节流的传输协议，TCP 协议位于传输层，TCP 协议是 TCP/IP 协议簇中的核心协议，它最大的特点就是提供可靠的数据交付。
TCP 的主要特点有 慢启动、拥塞控制、快速重传、可恢复。

UDP 协议
UDP 协议就是 用户数据报协议，也就是 User Datagram Protocol，UDP 也是一种传输层的协议，与 TCP 相比，UDP 提供一种不可靠的数据交付，也就是说，UDP 协议不保证数据是否到达目标节点，
也就是说，当报文发送之后，是无法得知其是否安全完整到达的。UDP 是一种无连接的协议，传输数据之前源端和终端无需建立连接，不对数据报进行检查与修改，
无须等待对方的应答，会出现分组丢失、重复、乱序等现象。但是 UDP 具有较好的实时性，工作效率较 TCP 协议高。
UDP协议格式： 16位源端口号+16位目的端口号+16位UDP数据长度+16位UDP数据校验和+UDP数据

端口：
按端口号可分为3大类：
1、公认端口（Well-KnownPorts）：范围从0到1023
2、动态端口（Dynamic Ports）：范围从1024到65535
2.1、注册端口（RegisteredPorts）：从1024到49151
2.2、动态和/或私有端口（Dynamicand/orPrivatePorts）：：从49152到65535。

DNS 协议
DNS 协议是 域名系统协议，英文全称是 Domain Name System，它也是应用层的协议之一，DNS 协议是一个将域名和 IP 相互映射的分布式数据库系统。DNS 缓存能够加快网络资源的访问。

IP报文头定义：https://www.rfc-editor.org/rfc/rfc791

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Version|  IHL  |Type of Service|          Total Length         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Identification        |Flags|      Fragment Offset    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Time to Live |    Protocol   |         Header Checksum       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Source Address                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Destination Address                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Options                    |    Padding    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

Version:  4 bits
    The Version field indicates the format of the internet header.  This
    document describes version 4.

TTL   -  Time To Live
Protocol:  8 bits

    This field indicates the next level protocol used in the data
    portion of the internet datagram.  The values for various protocols
    are specified in "Assigned Numbers"

标识是那种协议，Protocol ，https://www.rfc-editor.org/rfc/rfc790
TCP是6，
UDP是17

                   ASSIGNED INTERNET PROTOCOL NUMBERS

   In the Internet Protocol (IP) [33] there is a field, called Protocol,
   to identify the the next level protocol.  This is an 8 bit field.

   Assigned Internet Protocol Numbers

      Decimal    Octal      Protocol Numbers                  References
      -------    -----      ----------------                  ----------
           0       0         Reserved                              [JBP]
           1       1         ICMP                               [53,JBP]
           2       2         Unassigned                            [JBP]
           3       3         Gateway-to-Gateway              [48,49,VMS]
           4       4         CMCC Gateway Monitoring Message [18,19,DFP]
           5       5         ST                                 [20,JWF]
           6       6         TCP                                [34,JBP]
           7       7         UCL                                    [PK]
           8      10         Unassigned                            [JBP]
           9      11         Secure                                [VGC]
          10      12         BBN RCC Monitoring                    [VMS]
          11      13         NVP                                 [12,DC]
          12      14         PUP                                [4,EAT3]
          13      15         Pluribus                             [RDB2]
          14      16         Telenet                              [RDB2]
          15      17         XNET                              [25,JFH2]
          16      20         Chaos                                [MOON]
          17      21         User Datagram                      [42,JBP]
          18      22         Multiplexing                       [13,JBP]
          19      23         DCN                                  [DLM1]
          20      24         TAC Monitoring                     [55,RH6]
       21-62   25-76         Unassigned                            [JBP]
          63      77         any local network                     [JBP]
          64     100         SATNET and Backroom EXPAK            [DM11]
          65     101         MIT Subnet Support                    [NC3]
       66-68 102-104         Unassigned                            [JBP]
          69     105         SATNET Monitoring                    [DM11]
          70     106         Unassigned                            [JBP]
          71     107         Internet Packet Core Utility         [DM11]
       72-75 110-113         Unassigned                            [JBP]
          76     114         Backroom SATNET Monitoring           [DM11]
          77     115         Unassigned                            [JBP]
          78     116         WIDEBAND Monitoring                  [DM11]
          79     117         WIDEBAND EXPAK                       [DM11]
      80-254 120-376         Unassigned                            [JBP]
         255     377         Reserved                              [JBP]


应用层协议关系：
  The following diagram illustrates the place of the internet protocol
  in the protocol hierarchy:
                 +------+ +-----+ +-----+     +-----+
                 |Telnet| | FTP | | TFTP| ... | ... |
                 +------+ +-----+ +-----+     +-----+
                       |   |         |           |
                      +-----+     +-----+     +-----+
                      | TCP |     | UDP | ... | ... |
                      +-----+     +-----+     +-----+
                         |           |           |
                      +--------------------------+----+
                      |    Internet Protocol & ICMP   |
                      +--------------------------+----+
                                     |
                        +---------------------------+
                        |   Local Network Protocol  |
                        +---------------------------+


1、以太网上使用两种标准帧格式。第一种是上世纪80年代提出的DIX v2格式，即Ethernet II格式。第二种是1983年提出的IEEE 802.3格式。
2、两种格式得区别在于Ethernet 格式种包含一个Type字段，标识以太网帧处理完之后将被发送到哪个上层协议进行处理，IEEE 802.3格式，同样位置是长度字段。
3、Ethernet II 格式相对使用广泛。
4、从Type/Length字段值可以区分两种帧类型：当Type字段值小于等于1500（0x05DC）时，帧使用的是IEEE 802.3格式。当Type字段值大于等于1536（0x0600）时，帧使用的是Ethernet II格式


Ethernet II协议帧格式：
目的mac地址： 6字节，接收设备的mac地址
源mac地址： 6字节，发送设备的mac地址
类型： 占2个字节，用于标记数据（playload）的协议类型。假设收到的是ARP数据，那么Type就是0x0806，0x0800 代表IP协议帧
Ethernet II帧格式
	    +-----------+-----------+-------------+--------------------+----------+
            |   DMAC    |   SMAC    |     Type    |          Data      |   FCS    |
            |  6 Bytes  |  6 Bytes  |   2 Bytes   |  Variable length   | 4 Bytes  |
            +-----------+-----------+-------------+--------------------+----------+
            |                                                                     |
                     |                                                          |
                               |                                             |
                                        |                                  |
                                                |                         |
                                                       |                 |
            +-------------+-----------+----------------+-----------------+
            |   帧间隙     |前同步码   |  帧开始定界符    |  Ethernet Frame |
            |至少12Bytes  | 7 Bytes   |  1 Byte        | Variable length |
            +-------------+-----------+----------------+-----------------+

IEEE 802.3协议帧格式：


七层网络协议：
应用层：提供各种各样的应用层协议,为用户与网络之间提供一个打交道的接口，DNS，POP3，SNMP，Telnet等等
表示层：提供应用层数据的公共表示,即统一数据格式,从而使得数据能在两个系统中传输
会话层：负责应用程序之间建立、维持和中断会话，同时也提供对设备和结点之间的会话控制，协调系统和服务之间的交流，并通过提供单工、半双工和全双工3种不同的通信方式，
       使系统和服务之间有序地进行通信。LDAP、RPC、
传输层：主要功能负责数据传输时端到端的完整性，即在网络上建立发送主机和目的主机之间的逻辑连接，从而隐藏了上一层提供数据传输时任何网络独立信息。TCP、UDP
网络层：负责数据从一个结点到另一个结点的传输，并根据地址（IP/IPX地址），为信息在网络中传输是选择最佳路径。IP,ICMP,ICMPv6,ARP,RARP
数据链路层：主要功能是负责信息从一个结点到另一人结点的物理传输，检测在物理层上传输可能发生的错误并进行纠错，同时处理网络拓扑结构和流量控制等问题。IEEE 802.3,WIFI(IEEE 802.11), Ethernet II。
物理层：主要功能是直接在物理传输介质上发送和接收数据位，为数据链路层提供物理连接。


receive侧receive.c：
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>

struct sockaddr_in localSock;
struct ip_mreq group;
int sd;
char databuf[1024];
int datalen = sizeof(databuf);

int main (int argc, char *argv[])
{
  /*
   * Create a datagram socket on which to receive.
   */
  sd = socket(AF_INET, SOCK_DGRAM, 0);
  if (sd < 0) {
    perror("opening datagram socket");
    exit(1);
  }
  /*
   * Enable SO_REUSEADDR to allow multiple instances of this
   * application to receive copies of the multicast datagrams.
   */
  {
    int reuse=1;
    if (setsockopt(sd, SOL_SOCKET, SO_REUSEADDR,
                   (char *)&reuse, sizeof(reuse)) < 0) {
      perror("setting SO_REUSEADDR");
      close(sd);
      exit(1);
    }
  }
  /*
   * Bind to the proper port number with the IP address
   * specified as INADDR_ANY.
   */
  memset((char *) &localSock, 0, sizeof(localSock));
  localSock.sin_family = AF_INET;
  localSock.sin_port = htons(5555);
  localSock.sin_addr.s_addr  = INADDR_ANY;
  //localSock.sin_addr.s_addr  = inet_addr("192.168.203.128");

  if (bind(sd, (struct sockaddr*)&localSock, sizeof(localSock))) {
    perror("binding datagram socket");
    close(sd);
    exit(1);
  }
  /*
   * Join the multicast group 225.1.1.1 on the local 9.5.1.1
   */
  group.imr_multiaddr.s_addr = inet_addr("225.1.1.1");
  //group.imr_interface.s_addr = inet_addr("127.0.0.1");
  group.imr_interface.s_addr = inet_addr("192.168.203.128");
  if (setsockopt(sd, IPPROTO_IP, IP_ADD_MEMBERSHIP,
                 (char *)&group, sizeof(group)) < 0) {
    perror("adding multicast group");
    close(sd);
    exit(1);
  }

  /*
   * Read from the socket.
   */
  datalen = sizeof(databuf);
  if (read(sd, databuf, datalen) < 0) {
    perror("reading datagram message");
    close(sd);
    exit(1);
  }
  else
  {
    printf("get datagram message ok! n");
    //printf("The message from multicast server is: "%s"n", databuf);
    for (int i = 0; i<datalen; i++) {
      printf("i:%d, %x\n", i, databuf[i]);
    }
  }
  return 0;
}


发送侧send.c，不需要加入多播组，只用往多播地址发送数据即可，但是要主要发送出去的网卡：
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
struct in_addr localInterface;
struct sockaddr_in groupSock;
int sd;
char databuf[1024] = "Multicast Data MSG!";
int datalen = sizeof(databuf);

int main (int argc, char *argv[])
  /*
   * Create a datagram socket on which to send.
   */
  sd = socket(AF_INET, SOCK_DGRAM, 0);
  if (sd < 0) {
    perror("opening datagram socket");
    exit(1);
  }

  /*
   * Initialize the group sockaddr structure with a
   * group address of 225.1.1.1 and port 5555.
   */
  memset((char *) &groupSock, 0, sizeof(groupSock));
  groupSock.sin_family = AF_INET;
  groupSock.sin_addr.s_addr = inet_addr("225.1.1.1");
  groupSock.sin_port = htons(5555);
  /*
   * Disable loopback so you do not receive your own datagrams.
   */
  {
    char loopch=0;
    if (setsockopt(sd, IPPROTO_IP, IP_MULTICAST_LOOP,
                   (char *)&loopch, sizeof(loopch)) < 0) {
      perror("setting IP_MULTICAST_LOOP:");
      close(sd);
      exit(1);
    }
  }

  /*
   * Set local interface for outbound multicast datagrams.
   */
  localInterface.s_addr = inet_addr("127.0.0.1");
  if (setsockopt(sd, IPPROTO_IP, IP_MULTICAST_IF,
                 (char *)&localInterface,
                 sizeof(localInterface)) < 0) {
    perror("setting local interface");
    exit(1);
  }

  /*
   * Send a message to the multicast group specified by the
   * groupSock sockaddr structure.
   */
  for (;;)
  {
    if (sendto(sd, databuf, datalen, 0,
              (struct sockaddr*)&groupSock,
              sizeof(groupSock)) < 0)
    {
      perror("sending datagram message");
    }
    sleep(5);
  }
  return 0;
}





