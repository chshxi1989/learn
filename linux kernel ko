lsmod显示加载的ko
chengshangxian@ubuntu:~/test/linux_kernel$ lsmod
Module                  Size  Used by
kobject_test           16384  0
rfcomm                 81920  4
bnep                   28672  2
vsock_loopback         16384  0
vmw_vsock_virtio_transport_common    40960  1 vsock_loopback


insmod加载ko，需要sudo权限
sudo insmod kobject_test.ko

卸载ko:
rmmod kobject_test.ko


kobject测试程序：
https://zhuanlan.zhihu.com/p/554838012
#include <linux/module.h>        // module_init  module_exit
#include <linux/init.h>          // __init   __exit
#include <linux/device.h> 
#include <linux/kernel.h> 
#include <linux/string.h> 
#include <linux/sysfs.h> 
#include <linux/stat.h> 

//MODULE_xxx这种宏作用是用来添加模块描述信息
MODULE_LICENSE("GPL");                // 描述模块的许可证
MODULE_AUTHOR("pp");                  // 描述模块的作者
MODULE_VERSION("0.1");                // 描述模块的版本
MODULE_DESCRIPTION("module kobject");   // 描述模块的介绍信息
MODULE_ALIAS("alias kobject");          // 描述模块的别名信息

void obj_test_release(struct kobject *kobject);
ssize_t kobj_test_show(struct kobject *kobject,struct attribute *attr,char *buf);
ssize_t kobj_test_store(struct kobject *kobject,struct attribute *attr,const char *buf,size_t count);


//文件：文件名+文件权限
struct attribute test_attr ={
    .name = "kobj_config",
    .mode = S_IRWXUGO,
};
//属性(指针数组),一个指针代码一个文件，有几个代表几个文件
static struct attribute *def_attrs[]={
    &test_attr,
    NULL,
};

//读写文件时会调用show/store方法
struct sysfs_ops obj_test_sysops = 
{
    .show = kobj_test_show,
    .store = kobj_test_store,
};

//important
struct kobj_type ktype =
{
    .release = obj_test_release,
    .sysfs_ops =&obj_test_sysops,
    .default_attrs = def_attrs,
};

//release当计数为0时调用
void obj_test_release(struct kobject *kobject)
{
    printk("eric_test: release .\n");
}

//读
ssize_t kobj_test_show(struct kobject *kobject,struct attribute *attr,char *buf)
{
    printk("have show.\n");
    printk("attrname:%s.\n",attr->name);
    sprintf(buf,"%s\n",attr->name);
    return strlen(attr->name)+2;
}
//写
ssize_t kobj_test_store(struct kobject *kobject,struct attribute *attr,const char *buf,size_t count)
{
    printk("have store\n");
    printk("write:%s\n",buf);
    return count;
}

//
struct kobject kobj;
static int  __init kobj_test_init(void)
{
    printk("kobject test init.\n");
    //初始化kobect,并将其注册到linux系统
    //ktype记录了kobject对象的属性和动作
    //NULL表示在sys根目录创建一个目录，目录名为kobject_test
    kobject_init_and_add(&kobj,&ktype,NULL,"kobject_test");
    return 0;
}

static void __exit  kobj_test_exit(void)
{
    printk("kobject test exit.\n");
    kobject_del(&kobj);
}

module_init(kobj_test_init);
module_exit(kobj_test_exit);




makefile编译：
# obj-m后是tab键缩进
obj-m := kobject_test.o
KERNEL := /usr/src/linux-headers-5.15.0-87-generic/
# PWD后是tab键缩进
PWD :=$(shell pwd)
Make := make
modules:
	$(MAKE) -C $(KERNEL) M=$(PWD) modules
clean:
	rm -f *.o *.ko


查看linux kernel的版本：
chengshangxian@ubuntu:~/test/linux_kernel$ cat /proc/version
Linux version 5.15.0-87-generic (buildd@bos03-amd64-016) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #97~20.04.1-Ubuntu SMP Thu Oct 5 08:25:28 UTC 2023

linux kernel头文件的路径：
chengshangxian@ubuntu:/usr/src/linux-headers-5.15.0-87-generic$ ls
arch   crypto         fs       io_uring  Kconfig  Makefile        net      security  ubuntu
block  Documentation  include  ipc       kernel   mm              samples  sound     usr
certs  drivers        init     Kbuild    lib      Module.symvers  scripts  tools     virt

chengshangxian@ubuntu:/usr/src/linux-headers-5.15.0-87-generic$ pwd
/usr/src/linux-headers-5.15.0-87-generic


